{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "RSDK",
	"scopeName": "source.rsdk",
	"patterns": [
		{
			"include": "#invalid-keywords"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#typename-entity"
		},
		{
			"include": "#flow-control"
		},
		{
			"include": "#declaration"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
        {
			"include": "#preprocessor-rule-conditional"
        },
		{
			"include": "#preprocessor-alias-definition"
		},
		{
			"include": "#preprocessor-function-definition"
		},
		{
			"include": "#function-definition"
		},
		{
			"include": "#alias-definition"
		},
		{
			"include": "#static-value-definition"
		},
		{
			"include": "#function-call"
		},
        {
            "match": ",",
            "name": "punctuation.separator.delimiter.rsdk"
        }
	],
	"repository": {
		"invalid-keywords": {
			"match": "\\b(end\\s*function|end\\s*table|end\\s*sub|end\\s*event|else|end\\s*if|loop|next|case|default|end\\s*switch|break)\\b",
			"captures": {
				"0": {
					"name": "invalid.illegal.stray-$1.rsdk"
				}
			}
		},
		"numbers": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
                                {
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?",
                                    "captures": {
                                        "1": {
                                            "name": "keyword.other.unit.hexadecimal.rsdk"
                                        },
                                        "2": {
                                            "name": "constant.numeric.hexadecimal.rsdk",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                                                    "name": "punctuation.separator.constant.numeric"
                                                }
                                            ]
                                        },
                                        "3": {
                                            "name": "punctuation.separator.constant.numeric"
                                        },
                                        "5": {
                                            "name": "keyword.other.unit.exponent.hexadecimal.rsdk"
                                        },
                                        "6": {
                                            "name": "keyword.operator.plus.exponent.hexadecimal.rsdk"
                                        },
                                        "7": {
                                            "name": "keyword.operator.minus.exponent.hexadecimal.rsdk"
                                        },
                                        "8": {
                                            "name": "constant.numeric.exponent.hexadecimal.rsdk",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                                                    "name": "punctuation.separator.constant.numeric"
                                                }
                                            ]
                                        },
                                        "9": {
                                            "name": "keyword.other.unit.suffix.integer.rsdk"
                                        }
                                    }
                                },
								{
									"match": "(\\G(?=[0-9.]))([0-9](?:[0-9])*)$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.rsdk",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
		},
		"typename-entity": {
			"match": "(TypeName|SfxName|AchievementName|PlayerName|StageName)\\s*(\\[)\\s*([\\w\\s]*)\\s*(\\])",
			"captures": {
				"1": {
					"name": "storage.type.typename.rsdk"
				},
				"2": {
					"name": "punctuation.squarebracket.open.rsdk"
				},
				"3": {
					"name": "entity.name.type.rsdk"
				},
				"4": {
					"name": "punctuation.squarebracket.close.rsdk"
				}
			}
		},
		"flow-control": {
			"patterns": [
				{
					"begin": "\\b(if)\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"end": "\\b(endif|end if)\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"patterns": [
						{
							"match": "\\b(else)\\b",
							"name": "keyword.control.$1.rsdk"
						},
						{
							"match": "\\b(endif|end if)\\b",
							"name": "keyword.control.$1.rsdk"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(switch)\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"end": "\\b(endswitch|end switch)\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"patterns": [
						{
							"begin": "\\b(case)\\b",
							"beginCaptures": {
								"0": {
									"name": "keyword.control.$1.rsdk"
								}
							},
							"end": "\\b(break)\\b",
							"endCaptures": {
								"0": {
									"name": "keyword.control.$1.rsdk"
								}
							},
							"patterns": [
								{
									"match": "\\b(case)\\b",
									"captures": {
										"0": {
											"name": "keyword.control.$1.rsdk"
										}
									}
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"match": "\\b(default)\\b",
							"name": "keyword.control.$1.rsdk"
						},
						{
							"match": "\\b(endswitch|end switch)\\b",
							"name": "keyword.control.$1.rsdk"
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(while)\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"end": "\\b(loop)\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\s*(foreach)\\s*\\(\\s*((\\w*)|[a-zA-Z0-9_ \\t\\[\\]]*])\\s*\\,\\s*(\\w*)\\s*\\,\\s*(\\w*)\\s*\\)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.$1.rsdk"
						},
						"2": {
							"patterns": [
								{
									"include": "#typename-entity"
								},
								{
									"match": "\\w*$",
									"name": "entity.name.type.group.rsdk"
								},
								{
									"match": ".*",
									"name": "invalid.illegal.type.rsdk"
								}
							]
						},
						"4": {
							"name": "entity.name.variable.local.rsdk"
						},
						"5": {
							"patterns": [
								{
									"match": "ACTIVE_ENTITIES|ALL_ENTITIES",
									"name": "entity.name.type.filter.rsdk"
								},
								{
									"match": ".*",
									"name": "invalid.illegal.type.rsdk"
								}
							]
						}
					},
					"end": "\\b(next)\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.$1.rsdk"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "^\\s*((\\w*)\\s*table)\\b\\s*(\\w*)",
					"beginCaptures": {
                        "1": {
                            "name": "storage.type.table.definition.retroscript"
                        },
                        "2": {
							"patterns": [
								{
									"include": "#definition-visibility"
								}
							],
                            "name": "storage.type.table.visibility.retroscript"
                        },
                        "3": {
                            "name": "entity.name.variable.table.retroscript"
                        }
					},
					"end": "\\b(end\\s*table)\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.$1.retroscript"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"begin": "\\b(function)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.type.$1.rsdk"
						}
					},
					"end": "\\b(end\\s*function)\\b",
					"endCaptures": {
						"1": {
							"name": "storage.type.$1.rsdk"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(sub|event)\\b",
					"beginCaptures": {
						"0": {
							"name": "storage.type.$1.rsdk"
						}
					},
					"end": "\\b(end\\s*sub|end\\s*event)\\b",
					"endCaptures": {
						"0": {
							"name": "storage.type.$1.rsdk"
						}
					},
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [{
				"name": "comment.line.double-slash.rsdk",
				"begin": "(\\/\\/)",
				"end": "(?=\\n)"
			}]
		},
		"strings": {
			"name": "string.quoted.double.rsdk",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.rsdk",
					"match": "\\\\."
				}
			]
		},
		"preprocessor-rule-conditional": {
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*(platform\\b\\:))\\s*",
					"beginCaptures": {
                        "0": {
                            "name": "meta.preprocessor.rsdk"
                        },
                        "1": {
                            "name": "keyword.control.directive.conditional.rsdk"
                        },
                        "2": {
                            "name": "punctuation.definition.directive.rsdk"
                        }
					},
                    "end": "^\\s*((#)\\s*endplatform\\b)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.preprocessor.rsdk"
                        },
                        "1": {
                            "name": "keyword.control.directive.conditional.rsdk"
                        },
                        "2": {
                            "name": "punctuation.definition.directive.rsdk"
                        }
                    },
					"patterns": [
						{
							"match": "Standard|Mobile|SW_Rendering|HW_Rendering|Use_Haptics|No_Haptics|Use_Decomp|Use_Mod_Loader|Editor|STANDARD|MOBILE|SW_RENDERING|HW_RENDERING|USE_F_FEEDBACK|NO_F_FEEDBACK|USE_DECOMP|USE_NETWORKING|USE_MOD_LOADER|EDITOR",
							"name": "entity.name.function.preprocessor.rsdk"
						},
						{
							"include": "$base"
						}
					]
				},
                {
                    "match": "^\\s*#\\s*(end\\s*platform)\\b",
                    "captures": {
                        "0": {
                            "name": "invalid.illegal.stray-$1.rsdk"
                        }
                    }
                }
			]
		},
		"preprocessor-alias-definition": {
			"patterns": [
				{
					"match": "^\\s*((#)\\s*(alias))\\b\\s*",
					"captures": {
                        "0": {
                            "name": "meta.preprocessor.rsdk"
                        },
                        "1": {
                            "name": "keyword.control.directive.alias.rsdk"
                        },
                        "2": {
                            "name": "punctuation.definition.directive.alias.rsdk"
                        }
					},
					"patterns": [ ]
				}
			]
		},
		"preprocessor-function-definition": {
			"patterns": [
				{
					"match": "^\\s*((#)\\s*(function))\\b\\s*(\\w*)",
					"captures": {
                        "0": {
                            "name": "meta.preprocessor.rsdk"
                        },
                        "1": {
                            "name": "keyword.control.directive.function.rsdk"
                        },
                        "3": {
                            "name": "punctuation.definition.directive.function.rsdk"
                        },
                        "4": {
                            "name": "entity.name.function.definition.rsdk"
                        }
					},
					"patterns": [ ]
				}
			]
		},
		"function-definition": {
			"patterns": [
				{
					"match": "^\\s*(reserve\\s*function)\\b\\s*(\\w*)",
					"captures": {
                        "1": {
                            "name": "storage.type.function.definition.rsdk"
                        },
                        "2": {
                            "name": "entity.name.function.definition.rsdk"
                        }
					},
					"patterns": [ ]
				}
			]
		},
		"static-value-definition": {
			"patterns": [
				{
					"match": "^\\s*((\\w*)\\s*value)\\b\\s*(\\w*)\\s*\\=\\s*([0-9a-zA-Z_\\.\\-]*)",
					"captures": {
                        "1": {
                            "name": "storage.type.value.definition.rsdk"
                        },
                        "2": {
							"patterns": [
								{
									"include": "#definition-visibility"
								},
								{
									"match": ".*",
									"name": "invalid.illegal"
								}
							],
                            "name": "storage.type.value.visibility.rsdk"
                        },
                        "3": {
                            "name": "entity.name.variable.static.rsdk"
                        },
                        "4": {
                            "patterns": [
								{
									"include": "#numbers"
								},
								{
									"match": ".*",
									"name": "invalid.illegal"
								}
							]
                        }
					}
				}
			]
		},
		"alias-definition": {
			"patterns": [
				{
					"match": "^\\s*((\\w*)\\s*alias)\\b\\s*([0-9a-zA-Z_\\.\\-]*)\\s*(\\:)\\s*([0-9a-zA-Z_\\.]*)",
					"captures": {
                        "1": {
                            "name": "storage.type.alias.definition.rsdk"
                        },
                        "2": {
							"patterns": [
								{
									"include": "#definition-visibility"
								}
							],
                            "name": "storage.type.alias.visibility.rsdk"
                        },
                        "3": {
							"patterns": [
								{
									"include": "#numbers"
								}
							]
                        },
                        "4": {
							"name": "punctuation.separator.colon.rsdk"
                        },
                        "5": {
							"patterns": [
								{
									"match": "\\w*",
									"name": "entity.name.type.constant.rsdk"
								}
							]
                        }
					}
				}
			]
		},
		"definition-visibility": {
			"match": "^(private|public)$",
			"name": "storage.type.visibility.rsdk"
		},
        "function-call": {
            "begin": "(?x)\n(?!(?:if|else|end\\s*if|while|loop|foreach|next|switch|case|default|break|end\\s*switch|function|end\\s*function|sub|end\\s*sub|event|end\\s*event)\\s*\\()\n(?=\n(?:[A-Za-z0-9_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
            "end": "(?<=\\))(?!\\w)",
            "name": "meta.function-call.rsdk",
            "patterns": [
                {
                    "include": "#function-call-innards"
                }
            ]
        },
        "function-call-innards": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
				{
                    "include": "#keywords"
                },
                {
                    "include": "#operators"
                },
                {
                    "begin": "(?x)\n(?!(?:if|else|end\\s*if|while|loop|foreach|next|switch|case|default|break|end\\s*switch|end\\s*table|function|end\\s*function|sub|end\\s*sub|event|end\\s*event)\\s*\\()\n(\n(?:[A-Za-z0-9_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.rsdk"
                        },
                        "2": {
                            "name": "punctuation.section.arguments.begin.bracket.round.rsdk"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.arguments.end.bracket.round.rsdk"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function-call-innards"
                        }
                    ]
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.parens.begin.bracket.round.rsdk"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.parens.end.bracket.round.rsdk"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#function-call-innards"
                        }
                    ]
                }
            ]
        }
	}
}
